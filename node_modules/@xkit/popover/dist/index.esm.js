import _extends from '@babel/runtime/helpers/extends';
import _objectWithoutPropertiesLoose from '@babel/runtime/helpers/objectWithoutPropertiesLoose';
import { jsx, Global } from '@emotion/core';
import React, { Fragment, useRef, useState, useEffect } from 'react';
import { useClickOutside } from '@swiftcarrot/react-hooks';
import Popper from 'popper.js';
import { uid } from '@swiftcarrot/utils';

var _ref = {
  name: "kpm0v2",
  styles: "position:absolute;display:block;width:16px;height:8px;margin:0 5px;&:before,&:after{position:absolute;display:block;content:'';border-color:transparent;border-style:solid;}"
};

var Arrow = function Arrow(_ref2) {
  var placement = _ref2.placement,
      props = _objectWithoutPropertiesLoose(_ref2, ["placement"]);

  return jsx(Fragment, null, jsx(Global, {
    styles: styles
  }), jsx("div", _extends({}, props, {
    "data-arrow": "true",
    css: _ref
  })));
};

var styles = {
  name: "rvo98s",
  styles: "[x-placement^='top']{margin-bottom:8px;[data-arrow]{bottom:-9px;}[data-arrow]:before{bottom:0;border-width:8px 8px 0;border-top-color:rgba(0,0,0,0.25);}[data-arrow]:after{bottom:1px;border-width:8px 8px 0;border-top-color:#fff;}}[x-placement^='right']{margin-left:8px;[data-arrow]{left:-9px;width:8px;height:16px;margin:5px 0;}[data-arrow]:before{left:0;border-width:8px 8px 8px 0;border-right-color:rgba(0,0,0,0.25);}[data-arrow]:after{left:1px;border-width:8px 8px 8px 0;border-right-color:#fff;}}[x-placement^='bottom']{margin-top:8px;[data-arrow]{top:-9px;}[data-arrow]:before{top:0;border-width:0 8px 8px 8px;border-bottom-color:rgba(0,0,0,0.25);}[data-arrow]:after{top:1px;border-width:0 8px 8px 8px;border-bottom-color:#fff;}}[x-placement^='left']{margin-right:8px;[data-arrow]{right:-9px;width:8px;height:16px;margin:5px 0;}[data-arrow]:before{right:0;border-width:8px 0 8px 8px;border-left-color:rgba(0,0,0,0.25);}[data-arrow]:after{right:1px;border-width:8px 0 8px 8px;border-left-color:#fff;}}"
};

var Popover = function Popover(_ref) {
  var header = _ref.header,
      body = _ref.body,
      children = _ref.children,
      placement = _ref.placement,
      trigger = _ref.trigger,
      customStyles = _ref.styles,
      props = _objectWithoutPropertiesLoose(_ref, ["header", "body", "children", "placement", "trigger", "styles"]);

  var child = React.Children.only(children);
  var popover = useRef(null);

  var _useState = useState(false),
      open = _useState[0],
      setOpen = _useState[1];

  var _useState2 = useState(false),
      visible = _useState2[0],
      setVisible = _useState2[1];

  var _useState3 = useState({
    popoverId: null,
    referenceId: null,
    arrowId: null
  }),
      ids = _useState3[0],
      setIds = _useState3[1];

  var popoverId = ids.popoverId,
      referenceId = ids.referenceId,
      arrowId = ids.arrowId;
  useClickOutside(popover, close);
  useEffect(function () {
    if (!popoverId) {
      return setIds({
        popoverId: uid('popover'),
        referenceId: uid('reference'),
        arrowId: uid('arrow')
      });
    }

    var popover = document.getElementById(popoverId);
    var reference = document.getElementById(referenceId);
    var arrow = document.getElementById(arrowId);

    if (popover && reference && arrow) {
      new Popper(reference, popover, {
        placement: placement,
        modifiers: {
          arrow: {
            element: arrow
          }
        }
      });
      setVisible(open);
    }
  }, [open]);

  function handleClick() {
    if (trigger === 'click') {
      setOpen(!open);
    }
  }

  function close(e) {
    if (e.target.id !== referenceId && !document.getElementById(referenceId).contains(e.target)) {
      setOpen(false);
    }
  }

  var styles = {
    content: [defaultStyles.content, customStyles.content],
    header: [defaultStyles.header, customStyles.header],
    body: [defaultStyles.body, customStyles.body]
  };
  return jsx(Fragment, null, popoverId ? jsx("div", _extends({}, props, {
    id: popoverId,
    ref: popover,
    css: styles.content,
    style: visible ? {
      display: 'block'
    } : {}
  }), jsx(Arrow, {
    id: arrowId
  }), header ? jsx("div", {
    css: styles.header
  }, header) : null, jsx("div", {
    css: styles.body
  }, body)) : null, React.cloneElement(child, _extends({}, child.props, {
    id: referenceId,
    onClick: handleClick
  })));
};

Popover.defaultProps = {
  placement: 'right',
  trigger: 'click',
  styles: {}
};
var defaultStyles = {
  content: {
    name: "106ha8s",
    styles: "display:none;max-width:300px;background-color:#fff;border-radius:4px;border:1px solid rgba(0,0,0,0.2);z-index:1060;"
  },
  header: {
    name: "12koz1z",
    styles: "padding:8px 12px;background-color:#f7f7f7;font-size:16px;font-weight:bold;border-top-left-radius:4px;border-top-right-radius:4px;"
  },
  body: {
    name: "k7kym8",
    styles: "padding:8px 12px;font-size:14px;border-bottom-left-radius:4px;border-bottom-right-radius:4px;"
  }
};

export default Popover;
