'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');

var events = ['mousedown', 'touchstart'];
function useClickOutside(ref, handler) {
  var savedHandler = react.useRef();
  react.useEffect(function () {
    savedHandler.current = handler;
  }, [handler]);
  react.useEffect(function () {
    var listener = function listener(e) {
      if (ref.current && !ref.current.contains(e.target)) {
        savedHandler.current(event);
      }
    };

    events.forEach(function (event) {
      document.addEventListener(event, listener, {
        passive: true
      });
    });
    return function () {
      events.forEach(function (event) {
        document.removeEventListener(event, listener, {
          passive: true
        });
      });
    };
  }, [ref, handler]);
}

// https://overreacted.io/making-setinterval-declarative-with-react-hooks/
function useInterval(callback, delay) {
  var savedCallback = react.useRef();
  react.useEffect(function () {
    savedCallback.current = callback;
  }, [callback]);
  react.useEffect(function () {
    function tick() {
      savedCallback.current();
    }

    if (delay !== null) {
      var id = setInterval(tick, delay);
      return function () {
        return clearInterval(id);
      };
    }
  }, [delay]);
}

function useWindowSize() {
  var _useState = react.useState({
    width: window.innerWidth,
    height: window.innerHeight
  }),
      size = _useState[0],
      setSize = _useState[1];

  function handleResize() {
    setSize({
      width: window.innerWidth,
      height: window.innerHeight
    });
  }

  react.useEffect(function () {
    window.addEventListener('resize', handleResize);
    return function () {
      return window.removeEventListener('resize', handleResize);
    };
  }, []);
  return size;
}

exports.useClickOutside = useClickOutside;
exports.useInterval = useInterval;
exports.useWindowSize = useWindowSize;
