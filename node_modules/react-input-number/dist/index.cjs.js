'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var _extends = _interopDefault(require('@babel/runtime/helpers/extends'));
var _objectWithoutPropertiesLoose = _interopDefault(require('@babel/runtime/helpers/objectWithoutPropertiesLoose'));
var core = require('@emotion/core');
var isNaN = _interopDefault(require('lodash/isNaN'));
var isNumber = _interopDefault(require('lodash/isNumber'));
var isString = _interopDefault(require('lodash/isString'));
var react = require('react');

var KEY_UP = 38;
var KEY_DOWN = 40;
var IS_IOS = typeof navigator !== 'undefined' ? navigator.userAgent.match(/iPhone|iPad|iPod/i) : false;

var InputNumber = function InputNumber(_ref) {
  var step = _ref.step,
      min = _ref.min,
      max = _ref.max,
      value = _ref.value,
      onChange = _ref.onChange,
      onKeyDown = _ref.onKeyDown,
      enableMobileNumericKeyboard = _ref.enableMobileNumericKeyboard,
      component = _ref.component,
      props = _objectWithoutPropertiesLoose(_ref, ["step", "min", "max", "value", "onChange", "onKeyDown", "enableMobileNumericKeyboard", "component"]);

  var _useState = react.useState(value),
      text = _useState[0],
      setText = _useState[1];

  react.useEffect(function () {
    setText(value);
  }, [value]);

  function handleChange(text) {
    var value = parseText(text);
    setText(text);

    if (onChange) {
      onChange(value);
    }
  }

  function handleWheel(e) {
    e.target.blur();
  }

  function handleKeyDown(e) {
    if (e.keyCode === KEY_UP) {
      up();
    } else if (e.keyCode === KEY_DOWN) {
      down();
    }

    if (onKeyDown) {
      onKeyDown(e);
    }
  }

  function up() {
    if (onChange) {
      onChange(changeValue('+', value, max, min, step));
    }
  }

  function down() {
    if (onChange) {
      onChange(changeValue('-', value, max, min, step));
    }
  }

  var inputProps = {
    value: text,
    onChange: handleChange,
    onKeyDown: handleKeyDown,
    onWheel: handleWheel
  };

  if (enableMobileNumericKeyboard) {
    return core.jsx(component, _extends({}, props, inputProps, {
      css: styles,
      type: 'number',
      inputMode: 'numeric',
      pattern: IS_IOS ? "[0-9]*" : '',
      step: step,
      min: min,
      max: max
    }));
  }

  return core.jsx(component, _extends({}, props, inputProps, {
    css: styles,
    type: 'text'
  }));
};

var Input = function Input(_ref2) {
  var onChange = _ref2.onChange,
      props = _objectWithoutPropertiesLoose(_ref2, ["onChange"]);

  function handleChange(e) {
    if (onChange) {
      onChange(e.target.value);
    }
  }

  return core.jsx("input", _extends({}, props, {
    onChange: handleChange
  }));
};

InputNumber.defaultProps = {
  autoComplete: 'off',
  enableMobileNumericKeyboard: false,
  value: '',
  component: Input,
  step: 1
};
var styles = {
  MozAppearance: 'textfield',
  '&::-webkit-inner-spin-button, &::-webkit-outer-spin-button': {
    WebkitAppearance: 'none',
    margin: 0
  }
};
function parseText(text) {
  if (isNumber(text)) return text;

  if (isString(text)) {
    text = text.trim();
    if (!text) return '';
    var num = parseFloat(text);

    if (!isNaN(num)) {
      return num;
    }
  }

  return '';
}
function changeValue(mod, value, max, min, step) {
  if (value === '') {
    if (isNumber(min)) return min;
    return '';
  }

  value = mod === '+' ? value + step : value - step;
  if (isNumber(max) && value > max) return max;
  if (isNumber(min) && value < min) return min;
  var p = (step.toString().split('.')[1] || []).length;

  if (p) {
    return parseFloat(value.toFixed(p));
  }

  return value;
}

module.exports = InputNumber;
